export const config = {
    name: "help",
    aliases: ["h", "cmds", "commands"],
    description: "Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ",
    usage: "{prefix}help [t√™n l·ªánh]",
    cooldown: 5,
    permissions: ["user"],
    commandCategory: "h·ªá th·ªëng",
    isDisabled: false,
    isDevOnly: false,
    dependencies: {},
    envConfig: {
        commandsPerPage: 10,
        showDisabledCommands: false
    }
};

export async function execute(api, message, args) {
    const { threadId, type } = message;
    const { data } = message;
    const fromId = data.uidFrom;

    try {
        // L·∫•y prefix t·ª´ config
        const prefix = api?.config?.prefix || "!";

        // L·∫•y t·∫•t c·∫£ c√°c l·ªánh t·ª´ global.data.allCommands
        const allCommands = global.data.allCommands || [];

        if (!allCommands || allCommands.length === 0) {
            return api.sendMessage(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªánh n√†o. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh bot.`, threadId, type);
        }

        // N·∫øu c√≥ t√™n l·ªánh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh ƒë√≥
        if (args.length > 0 && isNaN(args[0])) {
            const commandName = args[0].toLowerCase();

            // T√¨m l·ªánh trong danh s√°ch l·ªánh
            const command = allCommands.find(cmd => cmd.name === commandName);

            if (!command) {
                // N·∫øu kh√¥ng t√¨m th·∫•y trong global.data.allCommands, th·ª≠ t√¨m trong commands map c·ªßa bot n·∫øu c√≥
                const botCommand = api._bot && api._bot.commands ? api._bot.commands.get(commandName) : null;

                if (!botCommand) {
                    return api.sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh "${commandName}". Vui l√≤ng s·ª≠ d·ª•ng ${prefix}help ƒë·ªÉ xem danh s√°ch l·ªánh.`, threadId, type);
                }

                // N·∫øu t√¨m th·∫•y t·ª´ bot.commands, s·ª≠ d·ª•ng th√¥ng tin t·ª´ ƒë√≥
                return displayCommandInfo(api, botCommand.config, prefix, threadId, type);
            }

            // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh t·ª´ global.data.allCommands
            return displayCommandInfo(api, command, prefix, threadId, type);
        }

        // N·∫øu kh√¥ng c√≥ t√™n l·ªánh, hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh theo trang
        const page = args[0] && !isNaN(args[0]) ? parseInt(args[0]) : 1;
        if (isNaN(page) || page <= 0) {
            return api.sendMessage(`‚ùå S·ªë trang kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë l·ªõn h∆°n 0.`, threadId, type);
        }

        // L·ªçc b·ªè c√°c l·ªánh b·ªã v√¥ hi·ªáu h√≥a ho·∫∑c d√†nh ri√™ng cho dev (tr·ª´ khi ng∆∞·ªùi d√πng hi·ªán t·∫°i l√† admin)
        const filteredCommands = allCommands.filter(cmd =>
            (!cmd.isDisabled || config.envConfig.showDisabledCommands) &&
            (!cmd.isDevOnly || fromId === api._bot?.config?.adminID)
        );

        // Ph√¢n lo·∫°i l·ªánh theo danh m·ª•c
        const categories = new Map();
        for (const cmd of filteredCommands) {
            const category = cmd.commandCategory || "Ch∆∞a ph√¢n lo·∫°i";
            if (!categories.has(category)) {
                categories.set(category, []);
            }
            categories.get(category).push(cmd);
        }

        // S·∫Øp x·∫øp danh m·ª•c
        const sortedCategories = [...categories.entries()].sort((a, b) => a[0].localeCompare(b[0]));

        // T√≠nh to√°n t·ªïng s·ªë l·ªánh v√† s·ªë trang
        const totalCommands = filteredCommands.length;
        const commandsPerPage = config.envConfig.commandsPerPage;
        const totalPages = Math.ceil(sortedCategories.length / commandsPerPage);

        if (page > totalPages) {
            return api.sendMessage(`‚ùå Ch·ªâ c√≥ ${totalPages} trang. Vui l√≤ng nh·∫≠p s·ªë trang t·ª´ 1 ƒë·∫øn ${totalPages}.`, threadId, type);
        }

        // L·∫•y c√°c danh m·ª•c cho trang hi·ªán t·∫°i
        const startIdx = (page - 1) * commandsPerPage;
        const currentPageCategories = sortedCategories.slice(startIdx, startIdx + commandsPerPage);

        // T·∫°o n·ªôi dung help
        let helpMessage = `üìú DANH S√ÅCH L·ªÜNH (Trang ${page}/${totalPages})\n`;
        helpMessage += `T·ªïng s·ªë l·ªánh: ${totalCommands}\n\n`;

        for (const [category, commands] of currentPageCategories) {
            helpMessage += `„Äé ${category.toUpperCase()} „Äè\n`;

            // S·∫Øp x·∫øp l·ªánh theo t√™n
            const sortedCommands = commands.sort((a, b) => a.name.localeCompare(b.name));

            for (const cmd of sortedCommands) {
                const cmdName = cmd.name;
                const cmdDesc = cmd.description || "Kh√¥ng c√≥ m√¥ t·∫£";
                // ƒê√°nh d·∫•u lo·∫°i l·ªánh
                let cmdType = "";
                if (cmd.isCustom) cmdType = " [T√πy ch·ªânh]";
                else if (cmd.isDynamic) cmdType = " [ƒê·ªông]";

                helpMessage += `‚Ä¢ ${prefix}${cmdName}${cmdType}: ${cmdDesc}\n`;
            }

            helpMessage += "\n";
        }

        // Th√™m th√¥ng tin b·ªï sung v·ªÅ c√°ch s·ª≠ d·ª•ng bot
        helpMessage += `‚Ü©Ô∏è ƒê·ªÉ xem trang kh√°c, g√µ: ${prefix}help [s·ªë trang]\n`;
        helpMessage += `üìå ƒê·ªÉ xem chi ti·∫øt l·ªánh, g√µ: ${prefix}help [t√™n l·ªánh]`;

        return api.sendMessage(helpMessage, threadId, type);

    } catch (error) {
        console.error("Error in help command:", error);
        return api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã help: ${error.message}`, threadId, type);
    }
}

// H√†m hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh
function displayCommandInfo(api, cmdConfig, prefix, threadId, type) {
    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh
    let helpInfo = `üìå TH√îNG TIN L·ªÜNH\n\n`;
    helpInfo += `T√™n: ${cmdConfig.name}\n`;
    helpInfo += `M√¥ t·∫£: ${cmdConfig.description || "Kh√¥ng c√≥ m√¥ t·∫£"}\n`;
    helpInfo += `C√°ch d√πng: ${(cmdConfig.usage || "{prefix}{command}").replace(/{prefix}/g, prefix).replace(/{command}/g, cmdConfig.name)}\n`;

    if (cmdConfig.aliases && cmdConfig.aliases.length > 0) {
        helpInfo += `B√≠ danh: ${cmdConfig.aliases.join(", ")}\n`;
    }

    helpInfo += `Th·ªùi gian ch·ªù: ${cmdConfig.cooldown || 0} gi√¢y\n`;
    helpInfo += `Ph√¢n lo·∫°i: ${cmdConfig.commandCategory || "Ch∆∞a ph√¢n lo·∫°i"}\n`;

    // Hi·ªÉn th·ªã lo·∫°i l·ªánh (m·∫∑c ƒë·ªãnh, t√πy ch·ªânh, ƒë·ªông)
    if (cmdConfig.isCustom) {
        helpInfo += `Lo·∫°i: L·ªánh t√πy ch·ªânh\n`;
    } else if (cmdConfig.isDynamic) {
        helpInfo += `Lo·∫°i: L·ªánh ƒë·ªông\n`;
    } else {
        helpInfo += `Lo·∫°i: L·ªánh m·∫∑c ƒë·ªãnh\n`;
    }

    // Hi·ªÉn th·ªã quy·ªÅn h·∫°n n·∫øu c√≥
    if (cmdConfig.permissions) {
        helpInfo += `Quy·ªÅn h·∫°n: ${Array.isArray(cmdConfig.permissions) ? cmdConfig.permissions.join(", ") : cmdConfig.permissions}\n`;
    }

    return api.sendMessage(helpInfo, threadId, type);
}

export default {
    config,
    execute
};