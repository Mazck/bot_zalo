export const config = {
    name: "help",
    aliases: ["h", "cmds", "commands"],
    description: "Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ",
    usage: "{prefix}help [t√™n l·ªánh]",
    cooldown: 5,
    permissions: ["user"],
    commandCategory: "h·ªá th·ªëng",
    isDisabled: false,
    isDevOnly: false,
    dependencies: {},
    envConfig: {
        commandsPerPage: 10,
        showDisabledCommands: false
    }
};

export async function execute(api, message, args) {
    const { threadId, type } = message;
    const { data } = message;
    const fromId = data.uidFrom;

    try {
        // T√¨m ƒë·ªëi t∆∞·ª£ng bot t·ª´ api
        // D·ª±a v√†o c·∫•u tr√∫c c·ªßa ZaloBot trong code b·∫°n ƒë√£ chia s·∫ª
        // api l√† tham s·ªë ƒë∆∞·ª£c truy·ªÅn v√†o, v√† api ph·∫£i ƒë∆∞·ª£c t·∫°o t·ª´ ZaloBot
        const bot = api.zalo?.bot || api._zalobot;

        if (!bot || !bot.commands) {
            // N·∫øu kh√¥ng t√¨m th·∫•y bot ho·∫∑c commands, h√£y th·ª≠ truy c·∫≠p theo c√°ch kh√°c
            return api.sendMessage(`‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p danh s√°ch l·ªánh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.`, threadId, type);
        }

        // L·∫•y prefix t·ª´ config
        const prefix = bot.config?.prefix || "!";

        // N·∫øu c√≥ t√™n l·ªánh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh ƒë√≥
        if (args.length > 0 && isNaN(args[0])) {
            const commandName = args[0].toLowerCase();

            // T√¨m l·ªánh trong danh s√°ch l·ªánh
            const command = bot.commands.get(commandName);

            if (!command) {
                return api.sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh "${commandName}". Vui l√≤ng s·ª≠ d·ª•ng ${prefix}help ƒë·ªÉ xem danh s√°ch l·ªánh.`, threadId, type);
            }

            // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh
            let helpInfo = `üìå TH√îNG TIN L·ªÜNH\n\n`;
            helpInfo += `T√™n: ${command.config.name}\n`;
            helpInfo += `M√¥ t·∫£: ${command.config.description || "Kh√¥ng c√≥ m√¥ t·∫£"}\n`;
            helpInfo += `C√°ch d√πng: ${(command.config.usage || "{prefix}{command}").replace(/{prefix}/g, prefix).replace(/{command}/g, command.config.name)}\n`;

            if (command.config.aliases && command.config.aliases.length > 0) {
                helpInfo += `B√≠ danh: ${command.config.aliases.join(", ")}\n`;
            }

            helpInfo += `Th·ªùi gian ch·ªù: ${command.config.cooldown || 0} gi√¢y\n`;
            helpInfo += `Ph√¢n lo·∫°i: ${command.config.commandCategory || "Ch∆∞a ph√¢n lo·∫°i"}\n`;
            helpInfo += `Quy·ªÅn h·∫°n: ${command.config.permissions?.join(", ") || "user"}\n`;

            return api.sendMessage(helpInfo, threadId, type);
        }

        // N·∫øu kh√¥ng c√≥ t√™n l·ªánh, hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh theo trang
        const page = args[0] && !isNaN(args[0]) ? parseInt(args[0]) : 1;
        if (isNaN(page) || page <= 0) {
            return api.sendMessage(`‚ùå S·ªë trang kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë l·ªõn h∆°n 0.`, threadId, type);
        }

        // L·ªçc c√°c l·ªánh duy nh·∫•t (lo·∫°i b·ªè b√≠ danh tr√πng l·∫∑p) v√† ph√¢n lo·∫°i theo danh m·ª•c
        const uniqueCommands = new Map();
        const categories = new Map();

        // S·ª≠ d·ª•ng ƒë·ªëi t∆∞·ª£ng bot ƒë√£ t√¨m th·∫•y ƒë·ªÉ truy c·∫≠p commands
        bot.commands.forEach(cmd => {
            if (!uniqueCommands.has(cmd.config.name) &&
                (!cmd.config.isDisabled || config.envConfig.showDisabledCommands) &&
                (!cmd.config.isDevOnly || fromId === bot.config?.adminID)) {

                uniqueCommands.set(cmd.config.name, cmd);

                const category = cmd.config.commandCategory || "Ch∆∞a ph√¢n lo·∫°i";
                if (!categories.has(category)) {
                    categories.set(category, []);
                }

                categories.get(category).push(cmd);
            }
        });

        // S·∫Øp x·∫øp danh m·ª•c
        const sortedCategories = [...categories.entries()].sort((a, b) => a[0].localeCompare(b[0]));

        // T√≠nh to√°n t·ªïng s·ªë l·ªánh v√† s·ªë trang
        const totalCommands = uniqueCommands.size;
        const commandsPerPage = config.envConfig.commandsPerPage;
        const totalPages = Math.ceil(sortedCategories.length / commandsPerPage);

        if (page > totalPages) {
            return api.sendMessage(`‚ùå Ch·ªâ c√≥ ${totalPages} trang. Vui l√≤ng nh·∫≠p s·ªë trang t·ª´ 1 ƒë·∫øn ${totalPages}.`, threadId, type);
        }

        // L·∫•y c√°c danh m·ª•c cho trang hi·ªán t·∫°i
        const startIdx = (page - 1) * commandsPerPage;
        const currentPageCategories = sortedCategories.slice(startIdx, startIdx + commandsPerPage);

        // T·∫°o n·ªôi dung help
        let helpMessage = `üìú DANH S√ÅCH L·ªÜNH (Trang ${page}/${totalPages})\n`;
        helpMessage += `T·ªïng s·ªë l·ªánh: ${totalCommands}\n\n`;

        for (const [category, commands] of currentPageCategories) {
            helpMessage += `„Äé ${category.toUpperCase()} „Äè\n`;

            for (const cmd of commands) {
                const cmdName = cmd.config.name;
                const cmdDesc = cmd.config.description || "Kh√¥ng c√≥ m√¥ t·∫£";
                helpMessage += `‚Ä¢ ${prefix}${cmdName}: ${cmdDesc}\n`;
            }

            helpMessage += "\n";
        }

        // H∆∞·ªõng d·∫´n c√°ch chuy·ªÉn trang v√† xem chi ti·∫øt
        helpMessage += `‚Ü©Ô∏è ƒê·ªÉ xem trang kh√°c, g√µ: ${prefix}help [s·ªë trang]\n`;
        helpMessage += `üìå ƒê·ªÉ xem chi ti·∫øt l·ªánh, g√µ: ${prefix}help [t√™n l·ªánh]`;

        return api.sendMessage(helpMessage, threadId, type);

    } catch (error) {
        console.error("Error in help command:", error);
        return api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã help: ${error.message}`, threadId, type);
    }
}

export default {
    config,
    execute
};