import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration path for event templates
const configPath = path.join(__dirname, "../../includes/handler/data/config/groupEventTemplates.json");

export const config = {
    name: "set",
    aliases: ["set"],
    version: "1.0.0",
    description: "Qu·∫£n l√Ω v√† t√πy ch·ªânh th√¥ng b√°o s·ª± ki·ªán nh√≥m nh∆∞ th√¥ng b√°o tham gia, r·ªùi ƒëi, v.v.", // Command description
    usage: "{prefix}setEvent list - Xem danh s√°ch c√°c lo·∫°i s·ª± ki·ªán\n{prefix}setEvent view <type> - Xem m·∫´u th√¥ng b√°o cho lo·∫°i s·ª± ki·ªán\n{prefix}setEvent set <type> <text> - ƒê·∫∑t m·∫´u th√¥ng b√°o cho lo·∫°i s·ª± ki·ªán\n{prefix}setEvent reset - Kh√¥i ph·ª•c m·∫´u th√¥ng b√°o m·∫∑c ƒë·ªãnh", // Usage instructions
    cooldown: 5, // Cooldown in seconds
    permissions: ["user"], // Required permissions (admin, user, etc.)
    commandCategory: "utility", // Command category for organization
    isDisabled: false, // Whether the command is disabled
    isDevOnly: false, // Whether the command is only for developers
    dependencies: {},
    envConfig: {}
};

export async function onLoad() {
    // Ensure config directory exists
    const configDir = path.dirname(configPath);
    if (!fs.existsSync(configDir)) {
        fs.mkdirSync(configDir, { recursive: true });
    }
};

export async function execute(api, message, args) {
    const { threadId, type, data } = message;
    const fromId = data.uidFrom;

    // Check if admin (could use your permission system here)
    // Example: if (!isAdmin(fromId)) return api.sendMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", threadId, type);

    if (args.length === 0) {
        return api.sendMessage(
            "üì¢ L·ªánh qu·∫£n l√Ω th√¥ng b√°o s·ª± ki·ªán nh√≥m:\n" +
            "- list: Xem danh s√°ch lo·∫°i s·ª± ki·ªán\n" +
            "- view <type>: Xem m·∫´u th√¥ng b√°o\n" +
            "- set <type> <text>: ƒê·∫∑t m·∫´u th√¥ng b√°o\n" +
            "- reset: Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh",
            threadId,
            type
        );
    }

    const subCommand = args[0].toLowerCase();

    // Load current templates
    let templates = {};
    try {
        if (fs.existsSync(configPath)) {
            templates = fs.readJsonSync(configPath);
        }
    } catch (error) {
        console.error("Error loading templates:", error);
        return api.sendMessage("‚ùå L·ªói khi ƒë·ªçc file c·∫•u h√¨nh.", threadId, type);
    }

    switch (subCommand) {
        case "list":
            const eventTypes = Object.keys(templates);
            return api.sendMessage(
                "üìã Danh s√°ch lo·∫°i s·ª± ki·ªán:\n" + eventTypes.join(", "),
                threadId,
                type
            );

        case "view":
            if (args.length < 2) {
                return api.sendMessage("‚ö†Ô∏è Vui l√≤ng ch·ªâ ƒë·ªãnh lo·∫°i s·ª± ki·ªán!", threadId, type);
            }

            const viewType = args[1].toUpperCase();
            if (!templates[viewType]) {
                return api.sendMessage(`‚ùå Lo·∫°i s·ª± ki·ªán "${viewType}" kh√¥ng t·ªìn t·∫°i!`, threadId, type);
            }

            const template = templates[viewType];
            let templateText = Array.isArray(template.text)
                ? template.text.join("\n- ")
                : template.text;

            return api.sendMessage(
                `üìù M·∫´u th√¥ng b√°o cho s·ª± ki·ªán ${viewType}:\n- ${templateText}`,
                threadId,
                type
            );

        case "set":
            if (args.length < 3) {
                return api.sendMessage("‚ö†Ô∏è Vui l√≤ng ch·ªâ ƒë·ªãnh lo·∫°i s·ª± ki·ªán v√† n·ªôi dung th√¥ng b√°o!", threadId, type);
            }

            const setType = args[1].toUpperCase();
            if (!templates[setType]) {
                return api.sendMessage(`‚ùå Lo·∫°i s·ª± ki·ªán "${setType}" kh√¥ng t·ªìn t·∫°i!`, threadId, type);
            }

            const newText = args.slice(2).join(" ");

            // Update the template
            if (Array.isArray(templates[setType].text)) {
                templates[setType].text = [newText];
            } else {
                templates[setType].text = newText;
            }

            // Save updated templates
            try {
                fs.writeJsonSync(configPath, templates, { spaces: 2 });
                return api.sendMessage(
                    `‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·∫´u th√¥ng b√°o cho s·ª± ki·ªán ${setType}!`,
                    threadId,
                    type
                );
            } catch (error) {
                console.error("Error saving templates:", error);
                return api.sendMessage("‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh.", threadId, type);
            }

        case "reset":
            // Load default templates from your handler
            try {
                // This imports the default templates directly from your handler
                const { default: groupEventHandler } = await import("../includes/handler/groupEvent.js");
                const defaultTemplates = groupEventHandler.defaultTemplates || {};

                fs.writeJsonSync(configPath, defaultTemplates, { spaces: 2 });
                return api.sendMessage(
                    "‚úÖ ƒê√£ kh√¥i ph·ª•c m·∫´u th√¥ng b√°o m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ s·ª± ki·ªán!",
                    threadId,
                    type
                );
            } catch (error) {
                console.error("Error resetting templates:", error);
                return api.sendMessage("‚ùå L·ªói khi kh√¥i ph·ª•c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh.", threadId, type);
            }

        default:
            return api.sendMessage(
                "‚ö†Ô∏è L·ªánh ph·ª• kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng list, view, set, ho·∫∑c reset.",
                threadId,
                type
            );
    }
}

export default {
    config,
    onLoad,
    execute
};