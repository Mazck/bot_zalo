import { dirname } from "path";
import { join } from "path";
import { fileURLToPath } from "url";
import pkg from 'fs-extra';
const { readdirSync, readFileSync, writeFileSync, existsSync, unlinkSync } = pkg;
import { createRequire } from "module";
import chalk from "chalk";
import ora from "ora";

// Global flag to prevent duplicate QR code displays
let qrDisplayed = false;

/**
 * Handle the login process for Zalo
 * @param {Object} bot The ZaloBot instance
 * @returns {Promise<Object>} The Zalo API object
 */
async function handleLogin(bot) {
    // Reset QR display flag at the start
    qrDisplayed = false;

    // Ki·ªÉm tra xem c√≥ qrcode-terminal package ch∆∞a, n·∫øu ch∆∞a th√¨ c√†i ƒë·∫∑t
    if (!bot.isPackageInstalled('qrcode-terminal')) {
        bot.installPackage('qrcode-terminal', 'latest');
    }

    // Hi·ªÉn th·ªã menu ƒëƒÉng nh·∫≠p
    console.log(chalk.cyan('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'));
    console.log(chalk.yellow('üì± CH·ªåN PH∆Ø∆†NG TH·ª®C ƒêƒÇNG NH·∫¨P:'));
    console.log(chalk.cyan('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'));
    console.log(chalk.green('1. ƒêƒÉng nh·∫≠p b·∫±ng Cookie (m·∫∑c ƒë·ªãnh n·∫øu ƒë√£ c√≥ file cookie.json)'));
    console.log(chalk.green('2. ƒêƒÉng nh·∫≠p b·∫±ng m√£ QR'));
    console.log(chalk.cyan('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'));

    // ƒê·ªçc l·ª±a ch·ªçn t·ª´ command line
    const readline = await import('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    // Ki·ªÉm tra xem cookie.json c√≥ t·ªìn t·∫°i kh√¥ng ƒë·ªÉ x√°c ƒë·ªãnh l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh
    const hasCookieFile = existsSync("./cookie.json");
    let loginChoice = 1; // M·∫∑c ƒë·ªãnh l√† 1

    try {
        const answer = await new Promise(resolve => {
            rl.question(chalk.yellow(`Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n ${hasCookieFile ? '[1]' : '[2]'}: `), resolve);
        });

        // N·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh d·ª±a tr√™n s·ª± t·ªìn t·∫°i c·ªßa file cookie
        loginChoice = answer.trim() === '' ? (hasCookieFile ? 1 : 2) : parseInt(answer);

        // Ki·ªÉm tra gi√° tr·ªã nh·∫≠p v√†o
        if (isNaN(loginChoice) || (loginChoice !== 1 && loginChoice !== 2)) {
            loginChoice = hasCookieFile ? 1 : 2;
            bot.logger.warn(`L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ${loginChoice === 1 ? 'Cookie' : 'QR'}.`);
        }
    } catch (inputError) {
        bot.logger.error('L·ªói khi ƒë·ªçc l·ª±a ch·ªçn:', inputError);
        loginChoice = hasCookieFile ? 1 : 2;
    } finally {
        rl.close();
    }

    // ƒêƒÉng nh·∫≠p d·ª±a tr√™n l·ª±a ch·ªçn
    let loginSuccess = false;
    let retryWithQR = false;
    let api = null;

    // ƒêƒÉng nh·∫≠p b·∫±ng cookie n·∫øu ƒë∆∞·ª£c ch·ªçn v√† cookie t·ªìn t·∫°i
    if (loginChoice === 1) {
        api = await loginWithCookie(bot, hasCookieFile);

        if (api) {
            loginSuccess = true;
        } else {
            // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën th·ª≠ ph∆∞∆°ng th·ª©c QR kh√¥ng
            retryWithQR = await askForQrRetry();

            if (!retryWithQR) {
                throw new Error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i v√† ng∆∞·ªùi d√πng ƒë√£ h·ªßy ƒëƒÉng nh·∫≠p b·∫±ng QR.');
            }
        }
    }

    // ƒêƒÉng nh·∫≠p b·∫±ng QR n·∫øu ƒë∆∞·ª£c ch·ªçn ho·∫∑c cookie th·∫•t b·∫°i
    if ((loginChoice === 2 || retryWithQR) && !loginSuccess) {
        api = await loginWithQR(bot);

        if (api) {
            loginSuccess = true;
        } else {
            throw new Error('Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o Zalo. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
        }
    }

    return api;
}

/**
 * Login with cookie method
 * @param {Object} bot The ZaloBot instance
 * @param {boolean} hasCookieFile Whether cookie.json exists
 * @returns {Promise<Object|null>} The Zalo API object or null if failed
 */
async function loginWithCookie(bot, hasCookieFile) {
    bot.logger.info('ƒêang ƒëƒÉng nh·∫≠p b·∫±ng Cookie...');

    if (!hasCookieFile) {
        bot.logger.warn('Kh√¥ng t√¨m th·∫•y file cookie.json.');
        return null;
    }

    try {
        bot.cookie = JSON.parse(readFileSync("./cookie.json", "utf-8"));

        const spinner = ora({
            text: 'ƒêang ƒëƒÉng nh·∫≠p v·ªõi cookie...',
            color: 'blue'
        }).start();

        const api = await bot.zalo.login({
            cookie: bot.cookie,
            imei: bot.config.imei,
            userAgent: bot.config.userAgent,
        });

        spinner.succeed('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
        bot.logger.info('Bot Zalo ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng cookie!');
        return api;
    } catch (loginError) {
        bot.logger.error('ƒêƒÉng nh·∫≠p b·∫±ng cookie th·∫•t b·∫°i:', loginError.message);
        return null;
    }
}

/**
 * Ask user if they want to retry with QR login
 * @returns {Promise<boolean>} Whether to retry with QR
 */
async function askForQrRetry() {
    const readline = await import('readline');
    const rlRetry = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    const retryAnswer = await new Promise(resolve => {
        rlRetry.question(chalk.yellow('Cookie kh√¥ng h·ª£p l·ªá. B·∫°n c√≥ mu·ªën th·ª≠ ƒëƒÉng nh·∫≠p b·∫±ng QR? (Y/n): '), resolve);
    });
    rlRetry.close();

    return retryAnswer.trim().toLowerCase() !== 'n';
}

/**
 * Login with QR code
 * @param {Object} bot The ZaloBot instance
 * @returns {Promise<Object|null>} The Zalo API object or null if failed
 */
async function loginWithQR(bot) {
    // Reset QR display flag
    qrDisplayed = false;

    bot.logger.info('ƒêang chu·∫©n b·ªã ƒëƒÉng nh·∫≠p b·∫±ng QR code...');
    const __dirname = dirname(fileURLToPath(import.meta.url));
    const qrPath = join(__dirname, "./qr.png");

    const spinner = ora({
        text: 'ƒêang t·∫°o m√£ QR. Vui l√≤ng ƒë·ª£i...',
        color: 'yellow'
    }).start();

    try {
        // C·ªë g·∫Øng import qrcode-terminal
        let qrcode;
        try {
            const qrcodeModule = createRequire(import.meta.url)('qrcode-terminal');
            qrcode = qrcodeModule;
        } catch (qrErr) {
            bot.logger.debug('Kh√¥ng t√¨m th·∫•y module qrcode-terminal:', qrErr.message);
        }

        // ƒêƒÉng nh·∫≠p b·∫±ng QR code
        const api = await bot.zalo.loginQR({
            userAgent: '',
            qrPath: qrPath,
        }, (qrCodeData) => {
            spinner.succeed('ƒê√£ t·∫°o m√£ QR th√†nh c√¥ng!');
            handleQrData(qrCodeData, qrPath, qrcode, bot.logger);
        });

        // L∆∞u cookie m·ªõi sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        //saveNewCookie(api);

        bot.logger.info('Bot Zalo ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng QR code!');
        return api;
    } catch (qrLoginError) {
        spinner.fail('ƒêƒÉng nh·∫≠p b·∫±ng QR th·∫•t b·∫°i');
        bot.logger.error('ƒêƒÉng nh·∫≠p b·∫±ng QR th·∫•t b·∫°i:', qrLoginError.message);

        // Th·ª≠ ph∆∞∆°ng ph√°p ƒëƒÉng nh·∫≠p QR thay th·∫ø
        return await tryAlternativeQRLogin(bot, qrPath);
    }
}

/**
 * Handle QR code data display - Modified to prevent duplicate displays
 * @param {Object|string} qrCodeData QR code data from Zalo API
 * @param {string} qrPath Path to save QR image
 * @param {Object} qrcode QR code terminal module
 * @param {Object} logger Logger object
 */
function handleQrData(qrCodeData, qrPath, qrcode, logger) {
    // Prevent duplicate QR code displays
    if (qrDisplayed) {
        logger.debug('QR code ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã, b·ªè qua hi·ªÉn th·ªã tr√πng l·∫∑p.');
        return;
    }

    // Set the flag to indicate QR has been displayed
    qrDisplayed = true;

    // X·ª≠ l√Ω d·ªØ li·ªáu QR kh√°c nhau
    if (typeof qrCodeData === 'string') {
        // N·∫øu qrCodeData l√† ƒë∆∞·ªùng d·∫´n file
        logger.info(`Vui l√≤ng qu√©t m√£ QR t·∫°i: ${qrCodeData}`);
    } else if (qrCodeData && typeof qrCodeData === 'object') {
        // N·∫øu qrCodeData l√† object JSON
        logger.info('ƒê√£ nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu QR code:');

        // Hi·ªÉn th·ªã QR token n·∫øu c√≥
        if (qrCodeData.data && qrCodeData.data.token) {
            const token = qrCodeData.data.token;
            logger.info(`QR Token: ${token}`);

            // Hi·ªÉn th·ªã QR code d∆∞·ªõi d·∫°ng ASCII n·∫øu c√≥ qrcode-terminal
            if (qrcode) {
                console.log('\n');
                qrcode.generate(token, { small: true });
                console.log('\n');
            }
        }

        // Hi·ªÉn th·ªã th√¥ng tin QR image n·∫øu c√≥
        if (qrCodeData.data && qrCodeData.data.image) {
            const imagePreview = qrCodeData.data.image.substring(0, 15) +
                '...' +
                qrCodeData.data.image.substring(qrCodeData.data.image.length - 15);
            logger.debug(`QR Image (Base64): ${imagePreview}`);

            // L∆∞u d·ªØ li·ªáu h√¨nh ·∫£nh QR v√†o file n·∫øu c√≥ th·ªÉ
            try {
                const imgData = qrCodeData.data.image;
                if (imgData.startsWith('data:image')) {
                    // X·ª≠ l√Ω data URL
                    const base64Data = imgData.split(',')[1];
                    writeFileSync(qrPath, Buffer.from(base64Data, 'base64'));
                } else {
                    // Gi·∫£ s·ª≠ l√† base64 thu·∫ßn
                    writeFileSync(qrPath, Buffer.from(imgData, 'base64'));
                }
                logger.info(`ƒê√£ l∆∞u QR code v√†o file: ${qrPath}`);
            } catch (imgError) {
                logger.error('Kh√¥ng th·ªÉ l∆∞u h√¨nh ·∫£nh QR:', imgError.message);
            }
        }

        // Log object ƒë·∫ßy ƒë·ªß ƒë·ªÉ debug n·∫øu c·∫ßn
        logger.debug('QR Code Data chi ti·∫øt:', JSON.stringify(qrCodeData, null, 2));
    } else {
        // Tr∆∞·ªùng h·ª£p kh√°c, hi·ªÉn th·ªã raw data
        logger.info(`D·ªØ li·ªáu QR code: ${JSON.stringify(qrCodeData, null, 2)}`);
    }

    console.log(chalk.green('ƒêang ch·ªù qu√©t m√£ QR...'));
}

/**
 * Try alternative QR login method
 * @param {Object} bot The ZaloBot instance
 * @param {string} qrPath Path to save QR image
 * @returns {Promise<Object|null>} The Zalo API object or null if failed
 */
async function tryAlternativeQRLogin(bot, qrPath) {
    // Reset QR display flag
    qrDisplayed = false;

    bot.logger.info('ƒêang th·ª≠ ph∆∞∆°ng ph√°p ƒëƒÉng nh·∫≠p QR thay th·∫ø...');

    try {
        // Th·ª≠ ƒëƒÉng nh·∫≠p QR kh√¥ng ch·ªâ ƒë·ªãnh qrPath
        const api = await bot.zalo.loginQR({
            userAgent: bot.config.userAgent || '',
        }, (qrCodeData) => {
            // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω QR ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn
            handleQrData(qrCodeData, qrPath, null, bot.logger);
        });

        // L∆∞u cookie m·ªõi
        // saveNewCookie(api);

        bot.logger.info('Bot Zalo ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi ph∆∞∆°ng ph√°p QR thay th·∫ø!');
        return api;
    } catch (altQrError) {
        bot.logger.error('C·∫£ hai ph∆∞∆°ng ph√°p ƒëƒÉng nh·∫≠p QR ƒë·ªÅu th·∫•t b·∫°i:', altQrError.message);
        return null;
    }
}

/**
 * Save new cookie after successful login
 * @param {Object} api Zalo API object
 */
// function saveNewCookie(api) {
//     if (api && typeof api.getContext === 'function') {
//         const context = api.getContext();
//        writeFileSync("./idxCookieJar.json", JSON.stringify(context.cookie), "utf-8");
//         const cookieJar = readFileSync("./idxCookieJar.json", "utf-8");
//         const cookie = JSON.parse(cookieJar);

//         const array = cookie.cookies.map(cookie => ({
//             domain: cookie.domain.startsWith('.') ? cookie.domain : `.${cookie.domain}`,
//             expirationDate: cookie.expirationDate || null,
//             hostOnly: cookie.hostOnly || false,
//             httpOnly: cookie.httpOnly || false,
//             name: cookie.key,
//             path: cookie.path || '/',
//             sameSite: cookie.sameSite || 'no_restriction',
//             secure: cookie.secure || false,
//             session: cookie.session || false,
//             storeId: cookie.storeId || null,
//             value: cookie.value
//         }));
//         const filtered = array.filter(c => ['_zlang', 'zpsid', 'zpw_sek', 'app.event.zalo.me'].includes(c.name));
//         const now = new Date().toISOString();
//         const values = {
//             cookies: filtered.map(c => ({
//                 key: c.name,
//                 value: c.value,
//                 domain: c.domain?.replace(/^\./, '') || 'zalo.me',
//                 path: c.path || '/',
//                 hostOnly: false,
//                 creation: now,
//                 lastAccessed: now
//             }))
//         }
//         if (context && context.cookie) {
//             writeFileSync("./cookie.json", JSON.stringify(values), "utf-8");
//             console.log(chalk.green('‚úÖ ƒê√£ l∆∞u cookie m·ªõi v√†o file cookie.json'));

//             // Clear QR display status after successful login
//             qrDisplayed = false;

//             // Add some empty lines to visually separate the QR code from subsequent output
//             console.log('\n'.repeat(3));
//         } else {
//             console.warn('Kh√¥ng th·ªÉ l·∫•y cookie t·ª´ context Zalo.');
//         }
//     }
// }

export default handleLogin;